import React, { Component } from 'react'
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'

import { selectBook } from '../actions/index'

class BookList extends Component {
  renderList () {
    return this.props.books.map(book => {
      return (
        <li key={book.title} className='list-group-item'>
          {book.title}
        </li>
      )
    })
  }

  render () {
    return (
      <div>
        <ul className='list-group col-sm-4'>{this.renderList}</ul>
      </div>
    )
  }
}

function mapStateToProps (state) {
  return {
    books: state.books
  }
}
function mapDispatchToProps (dispatch) {
  return bindActionCreators(
    {
      selectBook: selectBook
    },
    dispatch
  )
}
// this promotes it to a container
export default connect(
  mapStateToProps,
  mapDispatchToProps
)(BookList)

// purpose, to render a list of books
// list building by renderList fn
// creates a ul
// calls a helper fn, renderList
// this.renderList is going to map over an array of books
// for each book in the array create an li containing the book's title
// want to plug in app state, need react-redux, connect
// promote to container (or smart component)
// has a direct connection to the state managed by redux
// books is the array of books
// take the app state and map to props
// (app state generated by reducers)
// whatever is returned will show up as props
// inside BookList (inside our container here)
// connect takes a fn and a component and produces a container
// A container is a component that is aware of the state
// mapStateToProps, first argument state, returns an object,
// object will be available to the component as this.props

// redux generated a state component that contained our books
// then mapped that state as props to our component
// because the state was updated, through our reducer,
// our component re-rendered with that list of books
